Merge Sort

To Do

Concept:

Merge Sort is a divide-and-conquer algorithm that divides an array into two halves, recursively sorts the sub-arrays, and then merges them to produce a sorted array. It is a highly efficient and stable sorting algorithm with a time complexity of O(n log n), making it suitable for large datasets.
Algorithm Overview:

1. Divide: Split the unsorted array into two halves.
2. Conquer: Recursively sort each half.
3. Combine (Merge): Merge the sorted halves to produce a single sorted array.
Visual Representation:

Consider the unsorted array `[38, 27, 43, 3, 9, 82, 10]`. The steps of Merge Sort can be illustrated as follows:
1. Initial Array: `[38, 27, 43, 3, 9, 82, 10]`
2. Divide:
- `[38, 27, 43]` | `[3, 9, 82, 10]`
3. Conquer (Recursive Sorting):
- `[38]` | `[27, 43]`
- `[38]` | `[27]` | `[43]`
- `[27, 38, 43]` | `[3]` | `[9, 82, 10]`
- `[27, 38, 43]` | `[3, 9]` | `[10, 82]`
- `[3, 9, 10, 27, 38, 43, 82]`

4. Combine (Merge): - `[3, 9, 10, 27, 38, 43, 82]`
Implementation in Python:

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        # Recursive call on each half
        merge_sort(left_half)
        merge_sort(right_half)

        # Merge the sorted halves
        merge(arr, left_half, right_half)

def merge(arr, left, right):
    i = j = k = 0

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            arr[k] = left[i]
            i += 1
        else:
            arr[k] = right[j]
            j += 1
        k += 1

    while i < len(left):
        arr[k] = left[i]
        i += 1
        k += 1

    while j < len(right):
        arr[k] = right[j]
        j += 1
        k += 1

# Example usage:
my_list = [38, 27, 43, 3, 9, 82, 10]
merge_sort(my_list)
print("Sorted list:", my_list)

This Python code demonstrates a simple implementation of the Merge Sort algorithm. Replace `my_list` with your own list to see the sorting in action.
Implementation in Java:

public class MergeSort {

    // Function to perform merge sort on an array
    static void mergeSort(int arr[], int left, int right) {
        if (left < right) {
            // Find the middle point
            int mid = left + (right - left) / 2;

            // Recursively sort the first and second halves
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            // Merge the sorted halves
            merge(arr, left, mid, right);
        }
    }

    // Function to merge two halves of an array
    static void merge(int arr[], int left, int mid, int right) {
        // Sizes of the two sub-arrays to be merged
        int n1 = mid - left + 1;
        int n2 = right - mid;

        // Create temporary arrays
        int leftArray[] = new int[n1];
        int rightArray[] = new int[n2];

        // Copy data to temporary arrays
        for (int i = 0; i < n1; ++i)
            leftArray[i] = arr[left + i];
        for (int j = 0; j < n2; ++j)
            rightArray[j] = arr[mid + 1 + j];

        // Merge the temporary arrays

        // Initial indices of the first and second sub-arrays
        int i = 0, j = 0;

        // Initial index of the merged sub-array
        int k = left;

        while (i < n1 && j < n2) {
            if (leftArray[i] <= rightArray[j]) {
                arr[k] = leftArray[i];
                i++;
            } else {
                arr[k] = rightArray[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements of leftArray[], if there are any
        while (i < n1) {
            arr[k] = leftArray[i];
            i++;
            k++;
        }

        // Copy remaining elements of rightArray[], if there are any
        while (j < n2) {
            arr[k] = rightArray[j];
            j++;
            k++;
        }
    }

    // Function to print an array
    static void printArray(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    // Example usage
    public static void main(String args[]) {
        int arr[] = {38, 27, 43, 3, 9, 82, 10};

        System.out.println("Original array:");
        printArray(arr);

        mergeSort(arr, 0, arr.length - 1);

        System.out.println("Sorted array:");
        printArray(arr);
    }
}
